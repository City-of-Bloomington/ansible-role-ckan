---
- file: path={{ ckan_path }}       state=directory owner={{ ckan_user }} group=staff mode=2775
- file: path="{{ ckan_path }}/etc" state=directory owner={{ ckan_user }} group=staff mode=2775

- name: Check for CKAN virtualenv
  become_user: "{{ ckan_user }}"
  command: virtualenv --no-site-packages "{{ ckan_path }}" creates="{{ ckan_path }}/bin"

- name: Install CKAN from source
  become_user: "{{ ckan_user }}"
  pip:
    name: "git+https://github.com/ckan/ckan.git@{{ ckan_branch }}#egg=ckan"
    virtualenv: "{{ ckan_path }}"

- name: Check if requirements already installed
  stat: path={{ ckan_path }}/lib/python2.7/site-packages/bleach
  register: ckan_requirements

- name: Update CKAN requirements
  become_user: "{{ ckan_user }}"
  pip:
    requirements: "{{ ckan_path }}/src/ckan/requirements.txt"
    virtualenv: "{{ ckan_path }}"
    state: present
  when: ckan_requirements.stat.exists == False

- name: Create CKAN config
  command: "{{ ckan_path }}/bin/paster make-config ckan {{ ckan_path }}/etc/production.ini
            creates={{ ckan_path }}/etc/production.ini"

- name: Update site_url in CKAN config
  lineinfile: dest="{{ ckan_path }}/etc/production.ini" regexp="{{ item.regexp }}" line="{{ item.line }}"
  with_items:
    - { regexp: 'ckan.site_url',  line: 'ckan.site_url = {{ ckan_site_url }}' }
    - { regexp: 'ckan\.auth\.create_user_via_web', line: 'ckan.auth.create_user_via_web = false' }

- name: Link to who.ini
  file:
    src: "{{ ckan_path }}/src/ckan/who.ini"
    dest: "{{ ckan_path }}/etc/who.ini"
    state: link

- include: postgresql.yml
- include: solr.yml
